@using Microsoft.Extensions.Localization;
@using System.Collections.ObjectModel
@using Necnat.Abp.NnLibCommon.Blazor.Extensions
@using Necnat.Abp.NnLibCommon.Domains
@using Necnat.Abp.NnLibCommon.Localization
@using Necnat.Abp.NnLibCommon.Validators
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.Identity
@inherits AbpComponentBase

<Fields>
    <Validation Validator="@ValidateApplicationName">
        <Field ColumnSize="ColumnSize.Is10">
            <FieldLabel>@L[DistributedServiceConsts.ApplicationNameDisplay]</FieldLabel>
            <TextEdit @bind-Text="@Entity!.ApplicationName">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>
    <Validation Validator="@ValidateIsActive">
        <Field ColumnSize="ColumnSize.Is2">
            <FieldLabel>@L[DistributedServiceConsts.IsActiveDisplay]</FieldLabel>
            <Check TValue="bool?" @bind-Checked="@Entity!.IsActive">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </Check>
        </Field>
    </Validation>
</Fields>
<Fields>
    <Validation Validator="@ValidateTag">
        <Field ColumnSize="ColumnSize.Is12">
            <FieldLabel>@L[DistributedServiceConsts.TagDisplay]</FieldLabel>
            <TextEdit @bind-Text="@Entity!.Tag">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>
</Fields>
<Fields>
    <Validation Validator="@ValidateUrl">
        <Field ColumnSize="ColumnSize.Is12">
            <FieldLabel>@L[DistributedServiceConsts.UrlDisplay]</FieldLabel>
            <TextEdit @bind-Text="@Entity!.Url">
                <Feedback>
                    <ValidationError />
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>
</Fields>

@namespace Necnat.Abp.NnLibCommon.Blazor.Components
@code {
    [Parameter]
    public DistributedServiceDto? Entity { get; set; }

    [Parameter]
    public EventCallback<DistributedServiceDto?> EntityChanged { get; set; }

    protected Dictionary<string, IStringLocalizer> _stringLocalizerDict;

    public DistributedServiceWrapper()
    {
        LocalizationResource = typeof(NnLibCommonResource);
        _stringLocalizerDict = new Dictionary<string, IStringLocalizer> { { ValidatorConsts.StringLocalizerNecnat, L } };
    }

    void ValidateApplicationName(ValidatorEventArgs e)
    {
        e.WithError(DistributedServiceValidator.ValidateApplicationName((string?)e.Value, _stringLocalizerDict));
    }

    void ValidateTag(ValidatorEventArgs e)
    {
        e.WithError(DistributedServiceValidator.ValidateTag((string?)e.Value, _stringLocalizerDict));
    }

    void ValidateUrl(ValidatorEventArgs e)
    {
        e.WithError(DistributedServiceValidator.ValidateUrl((string?)e.Value, _stringLocalizerDict));
    }

    void ValidateIsActive(ValidatorEventArgs e)
    {
        e.WithError(DistributedServiceValidator.ValidateIsActive((bool?)e.Value, _stringLocalizerDict));
    }
}